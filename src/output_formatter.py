"""
Output Formatter Module

This module provides functions to format and clean output from AI models.
"""

import re
import logging
from typing import Dict, Any, Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def clean_text(text: str) -> str:
    """
    Clean and format text by removing unnecessary whitespace and fixing formatting issues.
    
    Args:
        text: The text to clean
        
    Returns:
        The cleaned text
    """
    if not text:
        return ""
        
    # Remove excessive whitespace
    cleaned = re.sub(r'\s+', ' ', text)
    
    # Fix common formatting issues
    cleaned = cleaned.strip()
    
    # Ensure proper sentence endings
    if cleaned and not cleaned.endswith(('.', '!', '?', ':', ';')):
        cleaned += '.'
        
    logger.debug(f"Cleaned text (length: {len(cleaned)})")
    return cleaned

def format_output(response: Dict[str, Any], include_metadata: bool = True) -> Dict[str, Any]:
    """
    Format the output from an AI model.
    
    Args:
        response: The response from the AI model
        include_metadata: Whether to include metadata in the output
        
    Returns:
        The formatted output
    """
    if not response or "result" not in response:
        logger.warning("Invalid response format")
        return response
        
    # Clean the result text
    if response.get("result"):
        response["result"] = clean_text(response["result"])
        
    # Format metadata if included
    if include_metadata and "metadata" in response:
        # Keep metadata as is for now
        pass
        
    logger.info("Output formatted successfully")
    return response

def format_for_display(response: Dict[str, Any], format_type: str = "text") -> str:
    """
    Format the response for display in the specified format.
    
    Args:
        response: The response from the AI model
        format_type: The format to use (text, markdown, etc.)
        
    Returns:
        The formatted output as a string
    """
    if not response:
        return "No response available."
        
    if "error" in response:
        return f"Error: {response['error']}"
        
    result = response.get("result", "")
    
    if format_type == "text":
        # Simple text format
        output = result
    elif format_type == "markdown":
        # Markdown format with metadata
        model_info = response.get("metadata", {}).get("model_info", "unknown")
        output = f"# AI Response\n\n{result}\n\n*Generated by {model_info}*"
    else:
        # Default to simple text
        output = result
        
    logger.info(f"Output formatted for display ({format_type})")
    return output 